<!doctype html>

<%
  # We need to render and capture the sections already here, before the <head> element
  # because we want to add the section specific styles to the <head> element.
  # If we'd render the sections after the <head> elements, the section specific
  # styles would be empty
%>
<% content_for :sections do %>
  <% sections.each do |section| %>

    <% s = section["section"] %>
    <% section_id = "#{s['kind']}__#{s['id']}" %>

    <% case s["kind"] %>
    <% when "hero" %>
      <%= render partial: "hero", locals: {section_id: section_id, s: s} %>
    <% when "footer" %>
      <%= render partial: "footer", locals: {section_id: section_id, s: s} %>
    <% when "info" %>
      <%= render partial: "info", locals: {section_id: section_id, s: s} %>
    <% when "categories" %>
      <%= render partial: "categories", locals: {section_id: section_id, s: s} %>
    <% when "listings" %>
      <%= render partial: "listings", locals: {section_id: section_id, s: s} %>
    <% when "video" %>
      <%= render partial: "video", locals: {section_id: section_id, s: s} %>
    <% end %>

  <% end # sections#each %>
<% end # capture %>

<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <% unless local_assigns.has_key?(:skip_analytics) && skip_analytics %>
    <%= render partial: "layouts/google_analytics_script" %>
  <% end %>

  <title><%= page["title"]["value"] %></title>

  <%= favicon_link_tag community_context[:favicon] %>
  <%= favicon_link_tag community_context[:apple_touch_icon], rel: 'apple-touch-icon-precomposed', type: 'image/png' %>

  <%= stylesheet_link_tag 'app-bundle' %>

  <!-- SEO Meta -->
  <!--
  <meta name="description" content="The HTML5 Herald">
  <meta name="author" content="SitePoint">
  -->

  <%= render partial: "fonts", locals: { font_path: font_path } %>

  <style type="text/css">
    <% # Basic styling %>
    <%= styles %>

    <% # Styles from section partials. E.g. styles that need marketplace color %>
    <%= yield :hero_css %>
    <%= yield :footer_css %>
    <%= yield :info_css %>
    <%= yield :categories_css %>
    <%= yield :listings_css %>
    <%= yield :video_css %>
  </style>

</head>
<body>

  <% if topbar_enabled %>
  <div id="topbar-placeholder" class="topbar-placeholder"> </div>
  <% end %>

  <%= yield :sections %>

  <% # Add javascript libraries and external javascript code %>

  <% if sections.any? { |s| s["section"]["kind"] == "hero" && s["section"]["variation"]["value"] == "location_search" } %>
    <% key_param = local_assigns.has_key?(:google_maps_key) && google_maps_key ? "&key=#{google_maps_key}" : "" %>
    <script src="https://maps.googleapis.com/maps/api/js?libraries=places<%= key_param %>"></script>
    <script>
      <%= javascripts[:location_search] %>
    </script>
  <% end %>

  <% if sections.any? { |s| s["section"]["kind"] == "video" && s["section"]["variation"] == "youtube" } %>
    <script type="text/javascript">
     var tag = document.createElement('script');
     tag.id = 'youtube-player-script';
     tag.src = 'https://www.youtube.com/iframe_api';
     var firstScriptTag = document.getElementsByTagName('script')[0];
     firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

     function onYouTubeIframeAPIReady() {
       <%= yield :youtube_ready_js %>
     }
    </script>
  <% end %>

  <% # Add javascript from sections %>

  <%= yield :javascript %>

  <% if topbar_enabled %>
  <script>
    window.I18n = {};
    <%= javascripts[:translations] %>
  </script>

  <%= javascript_include_tag 'vendor-bundle' %>
  <%= javascript_include_tag 'app-bundle' %>

  <script>
    (function() {
      var renderTopBar = function renderTopBar(props, marketplaceCtx) {
        componentFn = function (props) {
          return window.ReactOnRails.getComponent('TopbarApp').component(props, marketplaceCtx)
        }
        ReactDOM.render(React.createElement(componentFn, props), document.getElementById('topbar-placeholder'));
      };

      var staticProps = <%= topbar_props.to_json.html_safe %>
      var staticMarketplaceContext = <%= marketplace_context.to_json.html_safe %>

      var p = Promise.race([
        window.fetch("<%= topbar_props_path %>", { credentials: 'same-origin' }),
        new Promise(function (resolve, reject) {
          setTimeout(function() { reject(new Error('request timeout')) }, 3000);
        })]);

      p.then(function (res) { return res.json(); })
       .then(function (resJson) {
          props = Object.assign({}, staticProps, resJson.props);
          mCtx = Object.assign({}, staticMarketplaceContext, resJson.marketplaceContext);
          renderTopBar(props, mCtx);
        });

      p.catch(function(error) {
        console.error(error);
        renderTopBar(staticProps, staticMarketplaceContext);
      });
    }());
  </script>
  <% end %>

</body>
</html>
